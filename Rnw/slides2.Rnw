\documentclass[handout]{beamer}
%\documentclass{beamer}
\usepackage{amsfonts,amsthm,amsmath}
\usepackage{hyperref}
\usepackage{mymath}

\setbeamertemplate{note page}[plain]

<<setup, echo=FALSE>>=
opts_chunk$set(
		background=c(1,1,1),
		size="small",
        fig.width=5,
        fig.height=3,
        comment="##",
        prompt=FALSE,
        fig.align="center",
        fig.path="figs_slides/",
        results="markup",
		error=FALSE,
        warning=FALSE,
        message=FALSE)
theme_set(theme_bw(base_size=10))
theme_update(axis.title.x=element_text(vjust = -0.1))
theme_update(axis.title.y=element_text(angle=90, vjust=0.12))
theme_update(plot.title=element_text(vjust = 1))
update_geom_defaults("point",aes(size=3))
update_geom_defaults("line",aes(size=1))
set.seed(1)
@


\title{Graphing Data with R}
\author{Guy Lebanon}

\begin{document}

\frame{\titlepage }

\begin{frame}
\frametitle{Goals}
\begin{itemize}[<+->]
\item Learn how to use base graphics
\item Learn how to use base ggplot2
\item Understand basic graph types and when to use them
\end{itemize}
Module will be separated to 4 parts: (a) base graphics, (b) ggplot2, (c) datasets, (d) basic graph types and case studies.
\end{frame}






\begin{frame}[fragile]
\frametitle{Base Graphics}

Base graphics syntax: \texttt{plot} function followed by helper functions for annotating the graph.

<<eval=F>>=
plot(x = dataframe$col_1, y = dataframe$col_2)
title(main = "figure title")  # add title
@

Examples of low-level functions in the  \texttt{graphics} package are:
\begin{itemize}
\item \texttt{title} adds or modifies labels of title and axes,
\item  \texttt{grid} adds a grid to the current figure,
\item \texttt{legend} displays a legend connecting symbols, colors, and line-types to descriptive strings, and
\item \texttt{lines} adds a line plot to an existing graph.
\end{itemize}
\end{frame}


\begin{frame}[fragile]
\frametitle{GGPLOT2}

Philosophy: (a) Grammar of graphics, (b) logical separation of graphics and data, (c) concise and maintainable code.

Option 1: Use the \texttt{qplot} function. Pass dataframe column names, dataframe name, geometry, and graphing options.

<<eval=F>>=
qplot(x = x1, 
      y = x2, 
      data = DF, 
      main = "figure title", 
      geom = "point")
@

Remember to install and load package using

<<eval=FALSE>>=
install.packages('ggplot2')
library(ggplot2)
@

\end{frame}
\begin{frame}[fragile]
Option 2: Use the \texttt{ggplot} function. Pass dataframe, column names through \texttt{aes} function. Compose function output with additional layers using \texttt{+} operator.

<<eval=F>>=
ggplot(dataframe, aes(x = x, y = y)) + 
  geom_line() + geom_point()
@

Function (and addition operator) returns an object that can be printed (using the \texttt{print} function) or saved for later.
\end{frame}

\begin{frame}
\frametitle{Datasets}
We will use the three datasets below.
\begin{itemize}
\item  \texttt{faithful}: eruption time and waiting time to next eruption (both in minutes) of the Old Faithful geyser in Yellowstone National Park, Wyoming, USA. 
\item \texttt{mtcars}: model name, weight, horsepower, fuel efficiency, and transmission type of cars from 1974 \emph{Motor Trend} magazine. 
\item \texttt{mpg}: fuel economy and other car attributes from  \href{http://fueleconomy.gov}{http://fueleconomy.gov} (similar to \texttt{mtcars} but larger and newer).
\end{itemize}
\end{frame}

\begin{frame}[fragile]

<<engine="R",eval=TRUE>>=
names(faithful)
names(mtcars)
names(mpg)
@

\end{frame}

\begin{frame}[fragile]
\frametitle{Strip Plot}

Strip plots graph one-dimensional numeric data as points in a two-dimensional space, with one coordinate corresponding to the index of the data point, and the other coordinate corresponding to its value.

<<engine="R",eval=FALSE,fig.height=3>>=
plot(faithful$eruptions, xlab = "sample number",
     ylab = "eruption times (min)",
     main = "Old Faithful Eruption Times")
@

\end{frame}

\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=F,fig.height=4.5>>=
plot(faithful$eruptions, xlab = "sample number",
     ylab = "eruption times (min)",
     main = "Old Faithful Eruption Times")
@
\end{frame}

\begin{frame}[fragile]
\begin{itemize}[<+->]
\item We conclude from the figure above that Old Faithful has two typical eruption times --- a long eruption time around 4.5 minutes, and a short eruption time around 1.5 minutes. 
\item
It also appears that the order in which the dataframe rows are stored is not related to the eruption variable.
\end{itemize}
\end{frame}

%---------------

\begin{frame}[fragile]
\frametitle{Histograms}

Histograms graph one-dimensional numeric data by dividing the range into bins and counting number of occurrences in each bin. It is critical to set the bin width value correctly. 

<<engine"R",eval=FALSE,,fig.height=3.5>>=
qplot(x = waiting, 
      data = faithful, 
      binwidth = 3, 
      main = "Waiting time to next eruption (min)")
ggplot(faithful ,aes(x = waiting)) + 
  geom_histogram(binwidth = 1)
@


\end{frame}

\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=F,fig.height=4>>=
qplot(x = waiting, 
      data = faithful, 
      binwidth = 3, 
      main = "Waiting time to next eruption (min)")
@
\end{frame}

\begin{frame}[fragile]
There are clearly two typical eruption times -- one around 2 minutes and one around 4.5 minutes.

$y$ values can be replaced with probability/frequency using the following syntax.

<<graphics5,eval=FALSE>>=
ggplot(faithful, aes(x = waiting, y = ..density..)) + 
  geom_histogram(binwidth = 4)
@

Selecting the best bandwidth to use when graphing a specific dataset is difficult and usually requires some trial and error.

\end{frame}



\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=F,fig.height=3>>=
qplot(x = waiting, 
      data = faithful, 
      binwidth = 3, 
      main = "Waiting time to next eruption (min)")
@
\end{frame}


\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=F,fig.height=3>>=
qplot(x = waiting, 
      data = faithful, 
      binwidth = 1, 
      main = "Waiting time to next eruption (min)")
@
\end{frame}


\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=F,fig.height=3>>=
qplot(x = waiting, 
      data = faithful, 
      binwidth = 10, 
      main = "Waiting time to next eruption (min)")
@
\end{frame}

%---------------

\begin{frame}[fragile]
\frametitle{Line Plot}

Line plot: a graph displaying a relation between $x$ and $y$ as a line in a Cartesian coordinate system. The relation may correspond to an abstract mathematical function or to a relation between two samples (for example, dataframe columns)

<<engine="R",eval=TRUE,eval=FALSE>>=
x = seq(-2, 2, length.out = 30)
y = x^2
qplot(x, y, geom = "line")  # line plot
qplot(x, y, geom = c("point", "line"))  # line and point plot
dataframe = data.frame(x = x, y = y)
ggplot(dataframe, aes(x = x, y = y)) + 
  geom_line() + geom_point()  # same as above but with ggplot
@

\end{frame}

\begin{frame}[fragile]
<<engine="R",eval=FALSE,fig.height=5.5>>=
S = sort.int(mpg$cty, index.return = T)
#  x: city mpg
#  ix: indices of sorted values of city mpg
plot(S$x,  #  plot sorted city mpg values with a line plot
     type = "l", 
     lty = 2, 
     xlab = "sample number (sorted by city mpg)",
     ylab = "mpg")
lines(mpg$hwy[S$ix] ,lty = 1)  # add dashed line of hwy mpg
legend("topleft", c("highway mpg", "city mpg"), 
  lty = c(1, 2))
@
\end{frame}


\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=FALSE,fig.height=5>>=
S = sort.int(mpg$cty, index.return = T)
#  S$x holds the sorted values of city mpg
#  S$ix holds the indices of the sorted values of city mpg
#  First plot the sorted city mpg values with a line plot
plot(S$x, 
     type = "l", 
     lty = 2, 
     xlab = "sample number (sorted by city mpg)",
     ylab = "mpg")
# add dashed line of hwy mpg
lines(mpg$hwy[S$ix] ,lty = 1)
legend("topleft", c("highway mpg", "city mpg"), lty = c(1, 2))
@
\end{frame}


%---------------

\begin{frame}[fragile]
\frametitle{Smoothed Histograms}

Denoting $n$ values by $x^{(1)},\ldots,x^{(n)}$, the smoothed histogram is the following function $f_h:\R\to\R_+$
\[f_h(x) = \frac{1}{n} \sum_{i=1}^n K_h(x-x^{(i)})\]
where the kernel function $K_h:\R\to\R$ typically achieves its maximum at 0, and decreases as $|x-x^{(i)}|$ increases.  We also assume that the kernel function integrates to one  $\int K_h(x)\,dx=1$ and satisfies the relation  \[K_h(r)=h^{-1}K_1(r/h).\] We refer to $K_1$ as the base form of the kernel and denote it as $K$. 
\end{frame}

\begin{frame}
Four popular kernel choices are the tricube, triangular, uniform, and Gaussian kernels, defined as $K_h(r)=h^{-1}K(r/h)$ where the $K(\cdot)$ functions are respectively
\begin{align*}
K(r) &=  (1-|r|^3)^3 \cdot 1_{\{|r|<1\}} & \text{(Tricube)}\\
K(r) &=  (1-|r|) \cdot 1_{\{|r|<1\}} & \text{(Triangular)}\\
K(r) &= 2^{-1} \cdot 1_{\{|r|<1\}} & \text{(Uniform)}\\
K(r) &=  \exp(-x^2/2)/\sqrt{2\pi} & \text{(Gaussian)}.
\end{align*}
As $h$ increases the kernel functions $K_h$ become wider.
\end{frame}

\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=FALSE,fig.height=4.5>>=
x_grid = seq(-3, 3, length.out = 100)
K1 = function(x) {
  ind = abs(x) > 1
  x = x * 0 + 1/2
  x[ind] = 0
  return(x)
}
K2 = function(x) {
  ind = abs(x) > 1
  x = 1 - abs(x)
  x[ind] = 0
  return(x)  
}
K3 = function(x) dnorm(x)
K4 = function(x) {
  ind = abs(x) > 1
  x = (1 - abs(x)^3)^3 
  x[ind] = 0
  return(x)
}
R = stack(list('uniform' = K1(x_grid), 
               'triangular' = K2(x_grid), 
               'gaussian' = K3(x_grid), 
               'tricube' = K4(x_grid), 
               'uniform' = K1(x_grid / 2) / 2, 
               'triangular' = K2(x_grid / 2) / 2, 
               'gaussian' = K3(x_grid / 2) / 2, 
               'tricube' = K4(x_grid / 2) / 2))
names(R) = c('kernel.value', 'kernel.type')
R$x = x_grid
R$h[1:400] = 'h=1'
R$h[401:800] = 'h=2'
qplot(x, 
      kernel.value, 
      data = R, 
      facets = kernel.type~h, 
      geom = "line", 
      xlab = "x", 
      ylab = "K_h(x)")
@

\end{frame}

\begin{frame}
<<engine="R",eval=TRUE,echo=FALSE,fig.height=4.5>>=
data = c(-1, 0, 0.5, 1, 2, 5, 5.5, 6)
data_size = length(data)
x_grid = seq(-3, data_size, length.out = 100)
kernel_values = x_grid %o% rep(1, data_size)
f = x_grid * 0
for(i in 1:data_size) {
  kernel_values[,i] = dnorm(x_grid, data[i], 1/6)/data_size
  f = f + kernel_values[,i]
}
plot(x_grid, f, xlab = "x", ylab = "f_h(x)", type = "l")
for (i in 1:data_size) lines(x_grid, kernel_values[,i]/2, lty = 2)
title("Smoothed histogram (h=1/6)", font.main = 1)
@  
\end{frame}

\begin{frame}

<<engine="R",eval=TRUE,echo=FALSE,fig.height=4.5>>=
data = c(-1, 0, 0.5, 1, 2, 5, 5.5, 6)
data_size = length(data)
x_grid = seq(-3, data_size, length.out = 100)
kernel_values = x_grid %o% rep(1, data_size)
f = x_grid * 0
for(i in 1:data_size) {
  kernel_values[,i] = dnorm(x_grid, data[i], 1/6)/data_size
  f = f + kernel_values[,i]
}

f = x_grid * 0
for(i in 1:data_size) {
  kernel_values[,i] = dnorm(x_grid, data[i], 1/3)/data_size
  f = f + kernel_values[,i]
}
plot(x_grid, f, xlab = "x", ylab = "f_h(x)", type = "l")
for (i in 1:data_size) lines(x_grid, kernel_values[,i]/2, lty = 2)
title("Smoothed histogram (h=1/3)", font.main = 1)
@
\end{frame}

\begin{frame}

<<engine="R",eval=TRUE,echo=FALSE,fig.height=4.5>>=
data = c(-1, 0, 0.5, 1, 2, 5, 5.5, 6)
data_size = length(data)
x_grid = seq(-3, data_size, length.out = 100)
kernel_values = x_grid %o% rep(1, data_size)
f = x_grid * 0
for(i in 1:data_size) {
  kernel_values[,i] = dnorm(x_grid, data[i], 1/6)/data_size
  f = f + kernel_values[,i]
}

f = x_grid * 0
for(i in 1:data_size) {
  kernel_values[,i] = dnorm(x_grid, data[i], 1/3)/data_size
  f = f + kernel_values[,i]
}

f = x_grid * 0
for(i in 1:data_size) {
  kernel_values[,i] = dnorm(x_grid, data[i], 1)/data_size
  f = f + kernel_values[,i]
}
plot(x_grid, f, xlab = "x" , ylab = "f_h(x)", type = "l")
for (i in 1:data_size) lines(x_grid, kernel_values[,i]/2, lty = 2)
title("Smoothed histogram (h=1)", font.main = 1)
@
\end{frame}

\begin{frame}[fragile]
In ggplot2:

<<engine="R",eval=FALSE,fig.height=4.5>>=
ggplot(faithful, aes(x = waiting, y = ..density..)) +
  geom_histogram(alpha = 0.3) + 
  geom_density(size = 1.5, color = "red")
@
\end{frame}

\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=FALSE,fig.height=4.2>>=
ggplot(faithful, aes(x = waiting, y = ..density..)) +
  geom_histogram(alpha = 0.3) + 
  geom_density(size = 1.5, color = "red")
@
\end{frame}

%---------------

\begin{frame}[fragile]
\frametitle{Scatter Plot}

A scatter plot graphs the relationships between two numeric variables. It graphs each pair of variables as a point in a two dimensional space whose coordinates are the corresponding $x,y$ values.

<<engine="R",eval=FALSE,fig.height=4.5>>=
plot(faithful$waiting, 
     faithful$eruptions, 
     pch = 17, 
     col = 2, 
     cex = 1.2, 
     xlab = "waiting times (min)", 
     ylab = "eruption time (min)")
@
\end{frame}

\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=FALSE,fig.height=4.5>>=
plot(faithful$waiting, 
     faithful$eruptions, 
     pch = 17, 
     col = 2, 
     cex = 1.2, 
     xlab = "waiting times (min)", 
     ylab = "eruption time (min)")
@
\end{frame}

\begin{frame}
\begin{itemize}
\item We conclude from the two clusters in the scatter plot above that there are two distinct cases: short eruptions and long eruptions. 
\item
Furthermore, the waiting times for short eruptions are typically short, while the waiting times for the long eruptions are typically long. 
\item
This is consistent with our intuition: it takes longer to build the pressure for a long eruption than it does for a short eruption.  
\end{itemize}
\end{frame}

\begin{frame}[fragile]
The relationship between two numeric variables and a categorical variable can be graphed using a scatter plot where the categorical variable controls the size, color, or shape of the markers.
<<engine="R",eval=FALSE,fig.height=5.5,fig.height=4.5>>=
plot(mtcars$hp, 
     mtcars$mpg, 
     pch = mtcars$am, 
     xlab = "horsepower",
     cex = 1.2, 
     ylab = "miles per gallon", 
     main = "mpg vs. hp by transmission")
legend("topright", c("automatic", "manual"), pch = c(0, 1))
@  
\end{frame}

\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=FALSE,fig.height=5.5,fig.height=4.5>>=
plot(mtcars$hp, 
     mtcars$mpg, 
     pch = mtcars$am, 
     xlab = "horsepower",
     cex = 1.2, 
     ylab = "miles per gallon", 
     main = "mpg vs. hp by transmission")
legend("topright", c("automatic", "manual"), pch = c(0, 1))
@  
\end{frame}

\begin{frame}
We draw several conclusions from this graph. 

\begin{itemize}[<+->]
  \item There is an inverse relationship between horsepower and mpg. 
  \item For a given horsepower amount, manual transmission cars are generally more fuel efficient. 
  \item Cars with the highest horsepower tend to be manual (the two highest horsepower cars in the dataset are Maserati Bora and Ford Pantera, both sports cars with manual transmissions).
\end{itemize}
\end{frame}


\begin{frame}[fragile]
Changing marker size in a scatter plot
<<engine="R",eval=FALSE,echo=TRUE>>=
qplot(x = wt, 
      y = mpg, 
      data = mtcars, 
      size = cyl, 
      main = "MPG vs. weight (x1000 lbs) by cylinder")
@
\end{frame}

\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=FALSE,fig.height=4.5>>=
qplot(x = wt, 
      y = mpg, 
      data = mtcars, 
      size = cyl, 
      main = "MPG vs. weight (x1000 lbs) by cylinder")
@
\end{frame}

\begin{frame}
\begin{itemize}[<+->]
  \item When data is noisy, it is useful to add a smoothed line curve to visualize median trends
\item
One technique to address this issue is to add a smoothed line curve $y_S$, which is a weighted average of the original data $(y^{(i)},x^{(i)})$ $i=1,\ldots,n$:
\begin{align*}
    y_S(x)=\sum_{i=1}^n \frac{K_h(x-x^{(i)})}{\sum_{i=1}^n K_h(x-x^{(i)})} y^{(i)}.
\end{align*}
where the $K_h$ functions above are the kernel functions described earlier
\item $y_S(x)$ is an average the $y^{(i)}$ values, weighted in a way that emphasizes $y^{(i)}$ values whose corresponding $x^{(i)}$ values are close to $x$. 
\item The denominator in the definition of $y_S$ ensures that the weights defining the weighted average sum to 1.
\end{itemize}
  
\end{frame}

\begin{frame}[fragile]
<<engine="R",eval=F,echo=T,fig.height=3>>=
qplot(disp, 
      mpg, 
      data = mtcars, 
      main = "MPG vs Eng. Displacement") + 
  stat_smooth(method = "loess", 
              degree = 0, 
              span = 0.2, 
              se = TRUE)
@

\texttt{span} parameter influences the value of $h$ in the slide before and can make the line more or less smooth. Optional argument \texttt{se} adds standard errors as shaded region.
\end{frame}

\begin{frame}[fragile]
<<engine="R",eval=T,echo=F,fig.height=3.5>>=
qplot(disp, 
      mpg, 
      data = mtcars, 
      main = "MPG vs Eng. Displacement") + 
  stat_smooth(method = "loess", 
              degree = 0, 
              span = 0.2, 
              se = TRUE)
@
\end{frame}


\begin{frame}[fragile]
\frametitle{Facets}
\begin{itemize}[<+->]
\item
Facets are a way to display multiple graphs next to each other in the same scale with shared axes. 
\item This is an effective way to visualize data that has higher dimensionality than 2 (mixed numeric-categorical).
\item The argument \texttt{facets} in qplot or ggplot takes a formula $a\sim b$ where $a,b$ specify the variables according to which the rows and columns are organized.
\end{itemize}

<<engine="R",eval=FALSE,echo=TRUE,fig.height=3>>=
qplot(x = wt, 
      y = mpg, 
      facets = .~amf, 
      data = mtcars, 
      main = "MPG vs. weight by transmission")
@
\end{frame}


\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=FALSE,fig.height=3>>=
# add new dataframe columns with more appropriate names for
# better axes labeling in future graphs
mtcars$amf[mtcars$am==0] = 'automatic'
mtcars$amf[mtcars$am==1] = 'manual'
mtcars$vsf[mtcars$vs==0] = 'flat'
mtcars$vsf[mtcars$vs==1] = 'V-shape'
qplot(x = wt, 
      y = mpg, 
      facets = .~amf, 
      data = mtcars, 
      main = "MPG vs. weight by transmission")
@
\end{frame}


\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=FALSE,fig.height=4>>=
mtcars$amf[mtcars$am==0] = 'automatic'
mtcars$amf[mtcars$am==1] = 'manual'
mtcars$vsf[mtcars$vs==0] = 'flat'
mtcars$vsf[mtcars$vs==1] = 'V-shape'
qplot(x = wt, 
      y = mpg, 
      facets = vsf~., 
      data = mtcars, 
      main = "MPG vs. weight by engine") + 
  stat_smooth(se = FALSE)
@
\end{frame}


\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=FALSE,fig.height=4>>=
mtcars$amf[mtcars$am==0] = 'automatic'
mtcars$amf[mtcars$am==1] = 'manual'
mtcars$vsf[mtcars$vs==0] = 'flat'
mtcars$vsf[mtcars$vs==1] = 'V-shape'
qplot(x = wt, 
      y = mpg, 
      data = mtcars, 
      facets = vsf~amf, 
      main = "MPG vs. weight by transmission and engine")
@
\end{frame}

\begin{frame}[fragile]
\begin{itemize}[<+->]
\item  Manual transmission cars tend to have lower weights and be more fuel efficient
\item  Cars with V-shape engines tend to weigh less and be more fuel efficient
\item  Manual transmission and V-engine cars tend to be lighter and more fuel efficient. Automatic transmission and non V-engine are heavier and less fuel efficient.
\end{itemize}  

``All pairs'' plot:
<<engine="R",eval=FALSE,fig.height=6>>=
DF = mpg[, c("cty", "hwy", "displ")]
library(GGally)
ggpairs(DF)
@
\end{frame}

\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=FALSE,fig.height=4.5>>=
DF = mpg[, c("cty", "hwy", "displ")]
library(GGally)
ggpairs(DF)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Contour Plots}
Contour plots graph relationship between three numeric variables: $z$ as a fuction of $x,y$. Steps: (a) create a grid for $x$ values, (b) create a grid for $y$ values, (c) create an expanded $x\times y$ grid, (d) compute values of $z$ on the expanded grid, (e) graph data.

<<engine="R",eval=FALSE,fig.height=3.5,width=3.5>>=
x_grid = seq(-1, 1, length.out = 100)
y_grid = x_grid
R = expand.grid(x_grid, y_grid)
names(R) = c('x', 'y')
R$z = R$x^2 + R$y^2
ggplot(R, aes(x = x,y = y, z = z)) + stat_contour()
@

\end{frame}

\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=FALSE,fig.height=3.5,width=3.5>>=
x_grid = seq(-1, 1, length.out = 100)
y_grid = x_grid
R = expand.grid(x_grid, y_grid)
names(R) = c('x', 'y')
R$z = R$x^2 + R$y^2
ggplot(R, aes(x = x,y = y, z = z)) + stat_contour()
@
  
\end{frame}

\begin{frame}[fragile]
\frametitle{Quantiles and Box-Plots}
Box plots are an alternative to histograms that are usually more ``lossy'' but emphasize quantiles and outliers in a way that a histogram cannot.
\begin{itemize}[<+->]
\item  The $r$-percentile of a numeric dataset is the point at which approximately $r$ percent of the data lie underneath, and approximately $100-r$ percent lie above.
\item  Another name for the $r$ percentile is the $0.r$ quantile.
\item The median or 50-percentile is the point at which half of the data lies underneath and half above. 
\item The 25-percentile and 75 percentile are the values below which 25\% and 75\% of the data lie. These points are also called the first and third quartiles (the second quartile is the median).
\item The interval between the first and third quartiles is called the inter-quartile range (IQR) (region covering the central 50\% of data).
\end{itemize}  
\end{frame}


\begin{frame}[fragile]
The box plot is composed of;
\begin{itemize}[<+->]
\item box denoting the IQR,
\item an inner line bisecting the box denoting the median,
\item whiskers extending to the most extreme point no further than 1.5 times IQR length away from the edges of the box,
\item points outside the box and whiskers marked as outliers.
\end{itemize}  

<<engine="R",eval=FALSE,fig.height=2>>=
ggplot(mpg, aes("",hwy)) + 
  geom_boxplot() + 
  coord_flip() + 
  scale_x_discrete("")
@
\end{frame}

\begin{frame}
<<engine="R",eval=TRUE,echo=FALSE,fig.height=2>>=
ggplot(mpg, aes("",hwy)) + 
  geom_boxplot() + 
  coord_flip() + 
  scale_x_discrete("")
@
\end{frame}


\begin{frame}[fragile]
<<engine="R",eval=FALSE,fig.height=2>>=
ggplot(mpg, aes(reorder(class, -hwy, median), hwy)) + 
  geom_boxplot() + 
  coord_flip() + 
  scale_x_discrete("class")
@
\end{frame}

\begin{frame}
<<engine="R",eval=TRUE,echo=FALSE,fig.height=4>>=
ggplot(mpg, aes(reorder(class, -hwy, median), hwy)) + 
  geom_boxplot() + 
  coord_flip() + 
  scale_x_discrete("class")
@
\end{frame}

\begin{frame}
\begin{itemize}[<+->]
\item The graph suggests the following fuel efficiency order among vehicle classes: pickups, SUV, minivans, 2-seaters, sub-compacts, midsizes, and compacts.

\item The compact and midsize categories have almost identical box and whiskers but the compact category has a few high outliers. 
\item The spread of subcompact cars is substantially higher than the spread in all other categories. 
\item We also note that SUVs and two-seaters have almost disjoint values (the box and whisker ranges are completely disjoint) leading to the observation that almost all 2-seater cars in the survey have a higher highway mpg than SUVs.
\end{itemize}  
\end{frame}


\begin{frame}[fragile]
\frametitle{QQ-Plots}
\begin{itemize}[<+->]
\item Quantile-quantile plots are useful for comparing two datasets, one of which may be sampled from a certain distribution. 
<<engine="R",eval=FALSE>>=
ggplot(R, aes(sample = samples)) + 
  stat_qq(distribution = qt, dparams = pm)
@
\item They are essentially scatter plots of the quantiles of one dataset vs. the quantiles of another dataset. 
\item The shape of the scatter plot implies the following conclusions (the proofs are straightforward applications of probability theory).
\end{itemize}
\end{frame}


\begin{frame}[fragile]
\begin{itemize}[<+->]
\item  A straight line with slope 1 that passes through the origin implies that the two datasets have identical quantiles, and therefore that they are sampled from the same distribution.
\item  A straight line with slope 1 that does not pass through the origin implies that the two datasets have distributions of similar shape and spread, but that one is shifted with respect to the other.
\item A straight line with slope different from 1 that does not pass through the origin implies that the two datasets have distributions possessing similar shapes but that one is translated and scaled with respect to the other.
\item A non-linear S shape implies that the dataset corresponding to the $x$-axis is sampled from a distribution with heavier tails than the other dataset.
\item A non-linear reflected S shape implies that the dataset whose quantiles correspond to the $y$-axis is drawn from a distribution having heavier tails than the other dataset.
\end{itemize}
\end{frame}

\begin{frame}[fragile]
<<engine="R",eval=F,echo=T,fig.height=4>>=
D = data.frame(samples = c(rnorm(200, 1, 1), 
                           rnorm(200, 0, 1), 
                           rnorm(200, 0, 2)))
D$parameter[1:200]   = 'N(1,1)';
D$parameter[201:400] = 'N(0,1)';
D$parameter[401:600] = 'N(0,2)';
qplot(samples, 
      facets = parameter~., 
      geom = 'histogram', 
      data = D)
@
\end{frame}


\begin{frame}[fragile]
<<engine="R",eval=T,echo=F,fig.height=4>>=
D = data.frame(samples = c(rnorm(200, 1, 1), 
                           rnorm(200, 0, 1), 
                           rnorm(200, 0, 2)))
D$parameter[1:200]   = 'N(1,1)';
D$parameter[201:400] = 'N(0,1)';
D$parameter[401:600] = 'N(0,2)';
qplot(samples, 
      facets = parameter~., 
      geom = 'histogram', 
      data = D)
@
\end{frame}

\begin{frame}[fragile]
<<engine="R",eval=F,echo=T,fig.height=4>>=
D = data.frame(samples = c(rnorm(200, 1, 1), 
                           rnorm(200, 0, 1), 
                           rnorm(200, 0, 2)));
D$parameter[1:200]   = 'N(1,1)';
D$parameter[201:400] = 'N(0,1)';
D$parameter[401:600] = 'N(0,2)';
ggplot(D, aes(sample = samples)) + 
  stat_qq() + 
  facet_grid(.~parameter)
@
\end{frame}


\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=FALSE,fig.height=4>>=
D = data.frame(samples = c(rnorm(200, 1, 1), 
                           rnorm(200, 0, 1), 
                           rnorm(200, 0, 2)));
D$parameter[1:200]   = 'N(1,1)';
D$parameter[201:400] = 'N(0,1)';
D$parameter[401:600] = 'N(0,2)';
ggplot(D, aes(sample = samples)) + 
  stat_qq() + 
  facet_grid(.~parameter)
@
\end{frame}

\begin{frame}[fragile]
<<engine="R",eval=F,echo=T,fig.height=4>>=
x_grid = seq(-6, 6, length.out = 200)
R = data.frame(density = dnorm(x_grid, 0, 1))
R$tdensity = dt(x_grid, 1.5) 
R$x = x_grid
ggplot(R, aes(x = x, y = density)) + 
  geom_area(fill = I('grey')) + 
  geom_line(aes(x = x, y = tdensity)) + 
  labs(title = "N(0,1) (shaded) and t-distribution (1.5 dof)")
@
\end{frame}


\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=FALSE,fig.height=4>>=
x_grid = seq(-6, 6, length.out = 200)
R = data.frame(density = dnorm(x_grid, 0, 1))
R$tdensity = dt(x_grid, 1.5) 
R$x = x_grid
ggplot(R, aes(x = x, y = density)) + 
  geom_area(fill = I('grey')) + 
  geom_line(aes(x = x, y = tdensity)) + 
  labs(title = "N(0,1) (shaded) and t-distribution (1.5 dof)")
@
\end{frame}

\begin{frame}[fragile]
<<engine="R",eval=F,echo=T,fig.height=4>>=
x_grid = seq(-6, 6, length.out = 200)
R = data.frame(density = dnorm(x_grid, 0, 1))
R$samples = rnorm(200, 0, 1)
pm = list(df = 1.5)
ggplot(R, aes(sample = samples)) + 
  stat_qq(distribution = qt, dparams = pm)
@
\end{frame}

\begin{frame}[fragile]
<<engine="R",eval=TRUE,echo=FALSE,fig.height=4>>=
x_grid = seq(-6, 6, length.out = 200)
R = data.frame(density = dnorm(x_grid, 0, 1))
R$samples = rnorm(200, 0, 1)
pm = list(df = 1.5)
ggplot(R, aes(sample = samples)) + 
  stat_qq(distribution = qt, dparams = pm)
@
\end{frame}

\end{document}

\begin{frame}[fragile]
\frametitle{}
  
\end{frame}


